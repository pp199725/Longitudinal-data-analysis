cells <- cellFromXY(r, fitpoints)## Returning the 4 cells closest to fitpoints
dd <- as.matrix(data.frame(sp))
dd[1:6,1:7]
dd <- dd[,1:7]
b <- brick(r, values=FALSE, nl=nrow(dd), ncols=ncol(dd))## Creating a multilayer raster or brick
b[cells] <- dd## assigning regression results to cells of the brick
names(b) <- colnames(dd)
plot(b)
b <- brick(r, values=FALSE, ncols=ncol(dd))## Creating a multilayer raster or brick
b[cells] <- dd## assigning regression results to cells of the brick
names(b) <- colnames(dd)
plot(b)
b <- brick(r, values=FALSE, ncols=ncol(dd))## Creating a multilayer raster or brick
b[cells] <- dd## assigning regression results to cells of the brick
names(b) <- colnames(dd)
plot(b)
nrow(dd)
ncol(dd)
length(cells)
b <- brick(r, values=FALSE, nl=nrow(dd))## Creating a multilayer raster or brick
b[cells] <- dd## assigning regression results to cells of the brick
names(b) <- colnames(dd)
plot(b)
b <- brick(r, values=FALSE, nl=nrow(dd))## Creating a multilayer raster or brick
str(b)
spplot(sp)
b <- brick(r, values=FALSE, nl=ncol(dd))## Creating a multilayer raster or brick
ncol(dd)
b[cells] <- dd## assigning regression results to cells of the brick
names(b) <- colnames(dd)
plot(b)
str(hd3)
gwr.model <- gwr(houseValue~income+houseAge+roomhead+bedroomhead+population,
data=hd3, bandwidth=100000, fit.points=fitpoints)
sp <- gwr.model$SDF
summary(sp@data)
print(spplot(sp, "income"))
cells <- cellFromXY(r, fitpoints)## Returning the 4 cells closest to fitpoints
dd <- as.matrix(data.frame(sp))
dd <- dd[,1:7]
b <- brick(r, values=FALSE, nl=ncol(dd))## Creating a multilayer raster or brick
b[cells] <- dd## assigning regression results to cells of the brick
names(b) <- colnames(dd)
plot(b)
str(hd2)
summary(hd2)
hd2 <- hd[!is.na(hd$NAME), ]
summary(hd2)
hd3=hd2
proj4string(hd3) <- proj4string(countiesTA)
coordinates(hd3) <- ~longitude+latitude
proj4string(hd3) <- proj4string(countiesTA)
gwr.model <- gwr(houseValue~income+houseAge+roomhead+bedroomhead+population,
data=hd3, bandwidth=100000, fit.points=fitpoints)
sp <- gwr.model$SDF
summary(sp@data)
print(spplot(sp, "income"))
cells <- cellFromXY(r, fitpoints)## Returning the 4 cells closest to fitpoints
dd <- as.matrix(data.frame(sp))
dd <- dd[,1:7]
b <- brick(r, values=FALSE, nl=ncol(dd))## Creating a multilayer raster or brick
b[cells] <- dd## assigning regression results to cells of the brick
names(b) <- colnames(dd)
plot(b)
coordinates(hd3) <- cbind(hd3$longitude, hd3$latitude)
hd3=hd2
coordinates(hd3) <- cbind(hd3$longitude, hd3$latitude)
proj4string(hd3) <- proj4string(counties)
hd3 <- spTransform(hd3, TA)
gwr.model <- gwr(houseValue~income+houseAge+roomhead+bedroomhead+population,
data=hd3, bandwidth=100000, fit.points=fitpoints)
sp <- gwr.model$SDF
summary(sp@data)
print(spplot(sp, "income"))
cells <- cellFromXY(r, fitpoints)## Returning the 4 cells closest to fitpoints
dd <- as.matrix(data.frame(sp))
dd <- dd[,1:7]
b <- brick(r, values=FALSE, nl=ncol(dd))## Creating a multilayer raster or brick
b[cells] <- dd## assigning regression results to cells of the brick
names(b) <- colnames(dd)
plot(b)
?spTransform
str(gwr.model$SDF)
str(gwr.model@SDF)
str(gwr.model)
str(gwr.model$SDF)
length(cells)
str(sp@data)
length(fitpoints)
str(fitpoints)
?cellFromXY
str(dd)
head(dd)
?brick
str(b)
37*42
b[1]
b[cells] <- dd
b[1]
b[10]
names(b) <- colnames(dd)
str(b)
plot(b)
plot(rinc)
plot(countiesTA, add=T)
plot(cnres)
plot(nb, coordinates(cnres), add=T, col='red')
print( spplot(cnres2) ) ## spplot: to map several leyers with a single legend
par(mfrow=c(2,1))
print( spplot(cnres2) ) ## spplot: to map several leyers with a single legend
plot(b)
par(mfrow=c(1,2))
plot(b)
par(mfrow=c(1,1))
windows()
print( spplot(cnres2) ) ## spplot: to map several leyers with a single legend
library(raster)
counties <- shapefile("C:/Users/Tadaishi/SkyDrive/Documents/PhD Epi/Spring 14'/GEO200CN/HW/data/data/California/counties_2000_TA.shp")
class(counties)
Yolo <- counties[counties$NAME == 'Yolo', ]
plot(counties, col='light gray', border='gray')
plot(Yolo, add=TRUE, density=20, lwd=2, col='red')
windows()
plot(counties, col='light gray', border='gray')
plot(Yolo, add=TRUE, density=20, lwd=2, col='red')
plot(counties, col='light gray', border='gray')
plot(Yolo, add=TRUE, density=30, lwd=2, col='red')
plot(counties, col='light gray', border='gray')
plot(Yolo, add=TRUE, density=10, lwd=2, col='red')
textplot(counties)
texttplot(counties)
textttplot(counties)
plot(counties)
plot(counties)
s <- select(counties)
s
plot(counties)
s <- select(counties)
s
plot(counties)
s <- select(counties)
s
rail <- shapefile('C:/Users/Tadaishi/SkyDrive/Documents/PhD Epi/Spring 14'/GEO200CN/HW/data/data/Yolo/Yolo_railroad.shp')
rail <- shapefile("C:/Users/Tadaishi/SkyDrive/Documents/PhD Epi/Spring 14'/GEO200CN/HW/data/data/Yolo/Yolo_railroad.shp")
class(rail)
city <- shapefile("C:/Users/Tadaishi/SkyDrive/Documents/PhD Epi/Spring 14'/GEO200CN/HW/data/data/Davis/CityLimits.shp")
class(city)
projection(Yolo)
projection(rail)
projection(city)
TA <- crs(Yolo)
railTA <- spTransform(rail, TA)
cityTA <- spTransform(city, TA)
dav <- coordinates(cityTA)
davis <- SpatialPoints(dav, proj4string=TA)
over(davis, counties)
?SpatialPoints
?over
i <- intersect(cityTA, counties)
data.frame(i, area=gArea(i, byid=TRUE))
plot(cityTA, col='blue')
plot(Yolo, add=TRUE, border='red', lwd=3)
?data.frame
?gArea
?intersect
class(cityTA)
class(i)
str(i)
?byid
??byid
?intersect
?gArea
data.frame(i, area=gArea(i, byid=TRUE))
library(rgeos)
davis_rail <- gIntersection(railTA, cityTA)
plot(davis_rail, add=TRUE)
TA
buffer <- gBuffer(railTA, width=500)
rail_buf <- gIntersection(buffer, cityTA)
plot(cityTA, col='light gray')
plot(rail_buf, add=TRUE, col='light blue', border='light blue')
plot(railTA, add=TRUE, lty=2, lwd=6)
plot(cityTA, add=TRUE)
plot(davis_rail, add=TRUE, col='red', lwd=6)
box()
round(100 * gArea(rail_buf) / gArea(cityTA))
?readOGR
parks <- readOGR("C:/Users/Tadaishi/SkyDrive/Documents/PhD Epi/Spring 14'/GEO200CN/HW/data/data/Davis", "Parks")
proj4string(parks)
parksTA <- spTransform(parks, TA)
railTA
rail <- gLineMerge(railTA)
rail
?gLineMerge
plot(cityTA, col='light gray', border='light gray')
plot(rail, add=T, col='blue', lwd=4)
plot(parksTA, col='dark green', add=TRUE)
?gDistance
d <- gDistance(parksTA, rail, byid=TRUE)
parksTA$railDist <- as.vector(d)
class(d)
head(d)
i <- which.max(d)
i
data.frame(parksTA)[i,]
plot(parksTA[i, ], add=TRUE, col='red', lwd=3, border='red')
j <- which.min(d)
data.frame(parksTA)[j,]
plot(parksTA[j, ], add=TRUE, col='red', lwd=3, border='orange')
library(raster)
r <- raster(cityTA)
dim(r) <- c(50, 100)
?rasterize
r <- rasterize(railTA, r, field=1)## Transfer values associated with 'object'
d <- distance(r)
class(d)
?distance
?extract
dp <- extract(d, parksTA, fun=mean, small=TRUE) ## Extract values from a Raster object at the locations of other spatial data (that is, perform a spatial query)
class(dp)
summary(dp)
length(dp)
dp
dp <- data.frame(parksTA$PARK, dist=dp)
dp <- dp[order(dp$dist), ]
plot(d)
plot(parksTA, add=TRUE)
plot(railTA, add=T, col='blue', lty=2)
plot(cityTA, add=TRUE)
plot(mask(d, cityTA))
plot(d)
plot(parksTA, add=TRUE)
plot(railTA, add=T, col='blue', lty=2)
plot(mask(d, cityTA), add=TRUE)
plot(mask(d, cityTA), add=TRUE)
plot(mask(d, cityTA), add=TRUE)
plot(mask(d, cityTA))
plot(parksTA, add=TRUE)
plot(railTA, add=T, col='blue', lty=2)
library(dismo)
install.packages("dismo")
centroids <- coordinates(parksTA)
?coordinates
class(centroids)
head(centroids)
v <- voronoi(centroids)
v <- Voronoi(centroids)
??voronoi
library(dismo)
v <- voronoi(centroids)
plot(v)
points(centroids, col='blue', pch=20)
proj4string(v) <- TA
?proj4string
class(v)
proj(v)
projection(v)
v <- voronoi(centroids)
projection(v)
proj4string(v) <- TA
projection(v)
vc <- gIntersection(v, cityTA, byid=TRUE)
plot(vc, border='red')
plot(parksTA, add=T, col='green')
ca <- aggregate(counties)
plot(counties, col='light green')
plot(ca, add=T, lwd=3, border='red')
library(raster)
alt <- raster("C:/Users/Tadaishi/SkyDrive/Documents/PhD Epi/Spring 14'/GEO200CN/HW/data/data/Yolo/alt.tif")
alt
yolo_geo <- spTransform(Yolo, projection(alt, asText=FALSE))
plot(alt)
plot(yolo_geo, add=TRUE)
?terrain
slope <- terrain(alt, opt='slope')
aspect <- terrain(alt, opt='aspect')
?hillShade
hill <- hillShade(slope, aspect, 40, 270)
plot(hill, col=grey(0:100/100), legend=FALSE, main='Elevation')
plot(alt, col=rainbow(25, alpha=0.35), add=TRUE)
v <- extract(alt, yolo_geo)
?unlist
class(v)
str(v)
hist(unlist(v), main='Elevation in Yolo county')
yalt <- crop(alt, yolo_geo)
ymask <- mask(yalt, yolo_geo)
summary(ymask)
plot(ymask)
plot(yolo_geo, add=T)
click(alt)
agrep("lasy", "1 lazy 2")
agrep("lasy", "1 lazy 2", max = list(sub = 0))
agrep("lasy", "1 lazy 2", max = list(sub = 2))
agrep("laysy", c("1 lazy", "1", "1 LAZY"), max = 2)
agrep("laysy", c("1 lazy", "1", "1 LAZY"), max = 2, value = TRUE)
agrep("laysy", c("1 lazy", "1", "1 LAZY"), max = 2, ignore.case = TRUE)
A <- set("a", "b", "c")
B <- set("c", "d", "e")
set_similarity(A, B)
install.packages("sets")
library(sets)
A <- set("a", "b", "c")
B <- set("c", "d", "e")
set_similarity(A, B)
set_dissimilarity(A, B)
A <- c("kk pp ll", "pp kk zz", "qq rr dd")
B <- c("kk pp uu", "rr kk zz", "ff gg uu")
A
B
simil <-set_similarity (A, B)
class(simil)
simil
AB <-data.frame(A, B)
AB
simil <-set_similarity (AB$A, AB$B)
simil
AB$S <-rep(NA, 3)
AB
simil = rep(NA, 3)
simil
for (i in 1:3){ AB$S[i] = set_similarity(AB$A[i], AB$B)}
AB
for (i in 1:3){ AB$S[i] = set_similarity(AB$A[i], AB$B[i])}
AB
?gset
A <- gset(c("a", "b", "c"), c(0.3, 0.7, 0.9))
B <- gset(c("c", "d", "e"), c(0.2, 0.4, 0.5))
gset_similarity(A, B, "Jaccard")
x1 <- c(0, 2, 0, 0, -1, 1)
x2 <- c(3, 0, 1, 1, 0, 1)
x3 <- c(0, 0, 3, 2, 1, 1)
y <- c("red", "red", "red", "green", "green", "red")
d <- data.frame(x1, x2, x3, y)
diff <-d[,1:3]-0
diffsqrd <-dist^2
sum.diff.sqrd <- apply(diffsqrd, 1, sum)
euc.dist <- sqrt(sum.diff.sqrd)
euc.dist
diffsqrd <-dist^2
x1 <- c(0, 2, 0, 0, -1, 1)
x2 <- c(3, 0, 1, 1, 0, 1)
x3 <- c(0, 0, 3, 2, 1, 1)
y <- c("red", "red", "red", "green", "green", "red")
d <- data.frame(x1, x2, x3, y)
diff <-d[,1:3]-0
diffsqrd <-dist^2
diffsqrd <-diff^2
sum.diff.sqrd <- apply(diffsqrd, 1, sum)
euc.dist <- sqrt(sum.diff.sqrd)
euc.dist
dist.color <- data.frame(euc.dist, y)
dist.color <- dist.color[order(dist.color$euc.dist),]
library(MASS)
windows()
m3 <- lm(crim ~ zn + indus + chas + nox + rm + age + dis + rad + tax + ptratio
+ black + lstat + medv, data=Boston)
anova(m3)
m4 <- lm(crim ~ zn + indus + chas + nox + rm + age + dis + rad + ptratio
+ black + lstat + medv, data=Boston)
anova(m4)
m5 <- lm(crim ~ zn + indus + chas + nox + rm + age + dis + rad
+ black + lstat + medv, data=Boston)
anova(m5)
m6 <- lm(crim ~ zn + indus + chas + nox + age + dis + rad
+ black + lstat + medv, data=Boston)
anova(m6)
m7 <- lm(crim ~ zn + indus + chas + nox + dis + rad
+ black + lstat + medv, data=Boston)
anova(m7)
AIC(m3, m4, m5, m6, m7)
plot(m7)
summary(Boston$crime)
summary(Boston$crim)
summary(Boston$tax)
summary(Boston$ptratio)
length(Boston$chas)
sum(Boston$chas)
A <- shapefile("D:/Jaber/New folder/clm ariana.shp")
plot(A)
B <- shapefile("D:/Jaber/New folder/clm_tu32.shp")
plot(B)
spplot(A, as.factor('CLM_NOM'))
spplot(B, as.factor('CLM_NOM'))
library(maptools)
AB <- spRbind(A, B)
install.packages("taRifx.geo")
library(taRifx.geo)
AB <- rbind(A,B, fix.duplicated.IDs=TRUE)
plot(AB)
?shapefile
library(Sp)
library(sp)
A <- shapefile("D:/Jaber/New folder/clm ariana.shp")
library(maptools)
library(maptools)
A <- shapefile("D:/Jaber/New folder/clm ariana.shp")
library(Sp)
library(sp)
A <- shapefile("D:/Jaber/New folder/clm ariana.shp")
library(mapdata)
install.packages("mapdata")
library(maptools)
A <- shapefile("D:/Jaber/New folder/clm ariana.shp")
install.packages("maptools")
library(sp)
library(maptools)
A <- shapefile("D:/Jaber/New folder/clm ariana.shp")
plot(A)
A <- shapefile("D:/Jaber/New folder/clm ariana.shp")
library(sp)
A <- shapefile("D:/Jaber/New folder/clm ariana.shp")
install.package("sp")
install.packages("sp")
library("mapproj", lib.loc="C:/Users/Tadaishi/Documents/R/win-library/3.0")
A <- shapefile("D:/Jaber/New folder/clm ariana.shp")
library(rgdal)
x <- c(-9.83087600,-9.73573157,-9.81124847)
y <- c(53.239663, 53.265411, 53.269905)
xy <- data.frame(x,y)
sites <-spTransform(xy, CRS(projection(ire)))
?projection
library(raster)
ire <- getData("GADM", country="IRL", level=1)
class(ire)
projection(ire)
sites <-spTransform(xy, CRS(projection(ire)))
detach("package:raster", unload=TRUE)
detach("package:rgdal", unload=TRUE)
detach("package:sp", unload=TRUE)
library(rgdal)
sites <-spTransform(xy, CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"))
?spTransform
detach("package:rgdal", unload=TRUE)
library("rgdal", lib.loc="C:/Users/Tadaishi/Documents/R/win-library/3.0")
xy
sites <-spTransform(xy, CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"))
detach("package:rgdal", unload=TRUE)
detach("package:sp", unload=TRUE)
library("sp", lib.loc="C:/Users/Tadaishi/Documents/R/win-library/3.0")
sites <-spTransform(xy, ire)
class(ire)
projection(ire)
x <- c(-9.83087600,-9.73573157,-9.81124847)
CRS(ire)
?projection
pr <-"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
pr
sites <-spTransform(xy, CRS(pr))
library(rgdal)
sites <-spTransform(xy, CRS(pr))
?vignette
vignette("igraph")
vignette(package=igraph)
?citation
citatio(package="igraph")
citation(package="igraph")
citation(package="base")
?aggregate
?length
?order
?attr
x <- 1:10
attr(x,"dim") <- c(2, 5)
x
x <- 1:10
attr(x,"n") <- 20
x
x <- 1:10
attr(x,"dim") <- c(2, 5)
x
x<-as.matrix(x)
x
attr(x, 'n') <- 10
x
?as.matrix
library(igraph)
el.13.s
fev <- read.dta("fev.dta")
library(foreign)
library(nlme)
fev <- read.dta("fev.dta")
fev <- read.dta("fev1.dta")
setwd("C:/Users/Tadaishi/SkyDrive/Docs/PhD Epi/Spring 2016/EPI 226/HW/HW6")
fev <- read.dta("fev.dta")
fev <- read.dta("fev1.dta")
str(fev)
summary(id)
summary(fev)
fev <- subset(fev, id!=197) # Removing outlier
fev$y <- fev$logfev1 - 2*(log(fev$ht))
summary(fev)
m3 <- lm(y ~ age + factor(id) - 1)
m3 <- lm(y ~ age + factor(id) - 1, data=fev)
summary(m3)
table(fev$id)
?table
summary(id)
summary(fev)
tapply(fev$age,fev$id,mean)
fev$mage <- rep(tapply(fev$age,fev$id,mean),table($fevid))
fev$mage <- rep(tapply(fev$age,fev$id,mean),table(fev$id))
fev$cage <- fev$age - fev$mage
head(fev)
m3 <- lme(y ~ mage + cage, random= ~ 1 | id, data=fev)
summary(m3)
install.packages("multcomp")
library(multcomp)
summary(m3)
K <- matrix(c(0, -1, 1), 1)
t <- glht(m3, linfct = K)
summary(t)
